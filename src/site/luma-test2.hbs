---
layout: default

meta:
  pgTitle: Boudreau Labs - Luma WebGL Test
  pgDesc: Homepage description

---
<style>
  .luma-frame {
    height: 90vh;
    width: 100%;
  }
</style>

<div class="container py-4">
  <div class="row">
    <div class="col">
      <div class="ratio ratio-16x9">
        <canvas></canvas>
      </div>
    </div>
  </div>
</div>

<script type="importmap">
{
	"imports": {
		"three": "https://unpkg.com/three@0.157.0/build/three.module.js",
		"three/addons/": "https://unpkg.com/three@0.157.0/examples/jsm/",
		"@lumaai/luma-web": "https://unpkg.com/@lumaai/luma-web@0.2.0/dist/library/luma-web.module.js"
	}
}
</script>
<script type="module">
  import { WebGLRenderer, PerspectiveCamera, Scene, Color, FogExp2 } from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
  import { LumaSplatsSemantics, LumaSplatsThree } from '@lumaai/luma-web';

  let canvas = document.querySelector('canvas');

  let renderer = new WebGLRenderer({
    canvas: canvas,
    antialias: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight, false);

  let scene = new Scene();

  let camera = new PerspectiveCamera(65, 16/9, 0.1, 1000);
  camera.position.set( 0, 0, 4 );

  let controls = new OrbitControls(camera, canvas);
  controls.enableDamping = true;
  // controls.autoRotate = true;

  let splat = new LumaSplatsThree({
    // source: 'https://lumalabs.ai/capture/7d764b48-07fa-4031-852e-7c26cab4b903',
    // source: 'https://lumalabs.ai/capture/586ee7c3-dfd0-4e38-91ee-a5fce637d294',
    source: 'https://lumalabs.ai/capture/a458c1af-c1d7-49ef-bc0d-7ca98a1e8436',
    particleRevealEnabled: true,
    loadingAnimationEnabled: false,
  });
  scene.add(splat);

  console.log('splat', Math.PI);

  // filter splats to only show foreground/background layers
  splat.semanticsMask = LumaSplatsSemantics.FOREGROUND | LumaSplatsSemantics.BACKGROUND
  splat.rotation.x = -.1;
  // Adding fog to scene
  scene.fog = new FogExp2(new Color(0xdce0e8).convertLinearToSRGB(), 0.125);
  scene.background = scene.fog.color;

  renderer.setAnimationLoop(() => {
    controls.update();
    renderer.render(scene, camera);
  });
</script>
