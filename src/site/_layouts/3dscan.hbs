---
layout: base.hbs
---
<style>
  .luma-frame {
    height: 90vh;
    width: 100%;
  }
</style>

<div class="container-xxl py-4" style="max-width: 1300px;">
  <div class="row">
    <div class="col">
      <div class="ratio ratio-16x9 bg-light mb-2">
        <canvas></canvas>
      </div>
      <p class="text-end">
        <a class="btn btn-sm btn-outline-primary" href="/3d-scans/">All Scans</a>
        <a class="btn btn-sm btn-outline-primary" href="https://lumalabs.ai/capture/{{lumaId}}" target="_blank">View on Luma</a>

      </p>
    </div>
  </div>
</div>

<script type="importmap">
{
	"imports": {
		"three": "https://unpkg.com/three@0.157.0/build/three.module.js",
		"three/addons/": "https://unpkg.com/three@0.157.0/examples/jsm/",
		"@lumaai/luma-web": "https://unpkg.com/@lumaai/luma-web@0.2.0/dist/library/luma-web.module.js"
	}
}
</script>
<script type="module">
  import { WebGLRenderer, PerspectiveCamera, Scene, Color, FogExp2 } from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
  import { LumaSplatsSemantics, LumaSplatsThree } from '@lumaai/luma-web';

  let canvas = document.querySelector('canvas');
  let renderer = new WebGLRenderer({
    canvas: canvas,
    antialias: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight, false);

  let scene = new Scene();

  let camera = new PerspectiveCamera(75, 16/9, 0.1, 1000);
  camera.position.set( {{camPos}} );

  let controls = new OrbitControls(camera, canvas);
  controls.enableDamping = true;

  let splat = new LumaSplatsThree({
    source: 'https://lumalabs.ai/capture/{{lumaId}}',
    particleRevealEnabled: true,
    loadingAnimationEnabled: true,
  });
  scene.add(splat);

  // filter splats to only show foreground/background layers
  splat.semanticsMask = LumaSplatsSemantics.FOREGROUND | LumaSplatsSemantics.BACKGROUND

  renderer.setAnimationLoop(() => {
    controls.update();
    renderer.render(scene, camera);
  });
</script>
